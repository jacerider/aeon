////////////////////////////////////////////////////////////////////////////////
// MIXINS
// -----------------------------------------------------------------------------

@use 'sass:math'; /* stylelint-disable-line at-rule-no-unknown */

/// Transfers the colors in the `$colors`map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase.
@mixin add-foundation-colors() {
  @if map-has-key($colors, theme-primary) {
    $primary-color: color(theme-primary) !global;
  }
  @else {
    $primary-color: #1779ba !global; /* stylelint-disable-line color-no-hex */
  }
  @if map-has-key($colors, theme-secondary) {
    $secondary-color: color(theme-secondary) !global;
  }
  @else {
    $secondary-color: #767676 !global; /* stylelint-disable-line color-no-hex */
  }
  @if map-has-key($colors, theme-success) {
    $success-color: color(theme-success) !global;
  }
  @else {
    $success-color: #86c13d !global; /* stylelint-disable-line color-no-hex */
  }
  @if map-has-key($colors, theme-warning) {
    $warning-color: color(theme-warning) !global;
  }
  @else {
    $warning-color: #f1ba2e !global; /* stylelint-disable-line color-no-hex */
  }
  @if map-has-key($colors, theme-alert) {
    $alert-color: color(theme-alert) !global;
  }
  @else {
    $alert-color: #e54040 !global; /* stylelint-disable-line color-no-hex */
  }
}

// Root level component spacing
// ----------
/// @param {Keyword} $type [margin] - Type of spacing to output. Accepts either margin or padding.
// @param {List} $position [bottom top] - The position to apply spacing to. Accepts `top`, `bottom`, `left`, `right` in any combination.
@mixin component-spacing(
  $position: top bottom,
  $multiplier: 1,
  $type: margin
) {

  @if ($type == 'margin') {
    $margin: $global-margin;

    // Loop through each gutter position
    @each $value in $position {
      #{$type}-#{$value}: ($margin * 2) * $multiplier;

      @include breakpoint(medium) {
        #{$type}-#{$value}: ($margin * 3) * $multiplier;
      }

      @include breakpoint(large) {
        #{$type}-#{$value}: ($margin * 3.5) * $multiplier;
      }
    }
  }

  @if ($type == 'padding') {
    $padding: $global-padding;

    // Loop through each gutter position
    @each $value in $position {
      #{$type}-#{$value}: ($padding * 2) * $multiplier;

      @include breakpoint(medium) {
        #{$type}-#{$value}: ($padding * 3) * $multiplier;
      }

      @include breakpoint(large) {
        #{$type}-#{$value}: ($padding * 3.5) * $multiplier;
      }
    }
  }
}

// Buttons - Base button styling is handled in the %button placeholder.
// --------
@mixin component-button($background: null, $color: null, $border: null, $background-hover: null, $color-hover: null, $border-hover: null) {
  @extend %button;
  @if (($background != null) or ($color != null) or ($border != null) or ($background-hover != null) or ($color-hover != null) or ($border-hover != null)) {
    @if (($background != null) or ($color != null)) {

      &,
      &:visited,
      &:active,
      &:focus {
        @if ($background != null) {
          @if ($background == transparent) {
            background-color: $background;
          }
          @else {
            background-color: color($background);
          }
        }
        @if ($color != null) {
          color: color($color);
        }
        @if ($border != null) {
          outline: 2px solid color($border);
        }
        @else {
          outline: 0;
        }
      }
    }
    @if (($background-hover != null) or ($color-hover != null)) {

      &:hover {
        @if ($background-hover != null) {
          @if ($background-hover == transparent) {
            background-color: $background;
          }
          @else {
            background-color: color($background-hover);
          }
        }
        @if ($color-hover != null) {
          color: color($color-hover);
        }
        @if ($border-hover != null) {
          outline-color: color($border-hover);
        }
      }
    }
  }
  @content;
}

@mixin component-button-primary {
  @include component-button(theme-primary, theme-white, null, theme-secondary, theme-white);
  @content;
}

@mixin component-button-primary-outline() {
  @include component-button(transparent, theme-primary, theme-primary, theme-primary, theme-white, theme-primary);
  @content;
}

@mixin component-button-secondary {
  @include component-button(theme-secondary, theme-white, null, theme-primary, theme-white);
  @content;
}

@mixin component-button-secondary-outline() {
  @include component-button(transparent, theme-secondary, theme-secondary, theme-secondary, theme-white, theme-secondary);
  @content;
}

@mixin component-button-white {
  @include component-button(theme-white, theme-primary, null, theme-primary, theme-white);
  @content;
}

@mixin component-button-white-outline() {
  @include component-button(transparent, theme-white, theme-white, theme-white, theme-primary, theme-white);
  @content;
}

@mixin component-button-small {
  @include fluid-type(rem-calc(11), rem-calc(13));
  padding: ($global-padding * 0.5) ($global-padding);
  @content;
}

@mixin component-button-large {
  @include fluid-type(rem-calc(20), rem-calc(22));
  padding: ($global-padding) ($global-padding * 1.5);
  @content;
}

// Containers
// --------
@mixin component-container() {
  max-width: $global-width;
  margin-left: auto;
  margin-right: auto;
}

@mixin component-container-inset() {
  max-width: rem-calc(700);
  margin-left: auto;
  margin-right: auto;
}

@mixin component-container-wide() {
  max-width: rem-calc(1600);
  margin-left: auto;
  margin-right: auto;
}

// Utilities
// --------

@mixin component-on-dark-bg($prefix: 'color-bg') {
  .exo-modifier--#{$prefix}-dark & {
    @content;
  }
}

@mixin component-on-light-bg($prefix: 'color-bg') {
  .exo-modifier--#{$prefix}-light & {
    @content;
  }
}

// Fluid type.
@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1);
}

@mixin fluid-type($min-font-size, $max-font-size, $min-vw: null, $max-vw: null, $property: font-size) {

  @if ($min-vw == null) {
    $min-vw: rem-calc(map-get($breakpoints, 'medium'));
  }
  @if ($max-vw == null) {
    $max-vw: rem-calc(map-get($breakpoints, 'xlarge'));
  }
  $min-vw-unit: unit($min-vw);
  $max-vw-unit: unit($max-vw);
  $min-font-size-unit: unit($min-font-size);
  $max-font-size-unit: unit($max-font-size);

  @if $min-vw-unit == $max-vw-unit and $min-vw-unit == $min-font-size-unit and $min-vw-unit == $max-font-size-unit {

    & {
      #{$property}: $min-font-size;

      @media screen and (min-width: $min-vw) {
        #{$property}: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        #{$property}: $max-font-size;
      }
    }
  }
}
